import sqlite3
import random
import time
from datetime import datetime
from prefect import flow, task

DATABASE_NAME = "database.db"


@task
def pick_medal():
    """–í–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä –º–µ–¥–∞–ª—ñ."""
    medal = random.choice(["Gold", "Silver", "Bronze"])
    print(f"üèÖ –í–∏–±—Ä–∞–Ω–æ –º–µ–¥–∞–ª—å: {medal}")
    return medal


@task
def insert_medal(medal):
    """–î–æ–¥–∞—î –∑–∞–ø–∏—Å —É –±–∞–∑—É –¥–∞–Ω–∏—Ö."""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    cursor.execute("INSERT INTO medals (medal_type, count, created_at) VALUES (?, ?, ?)", (medal, 1, timestamp))
    conn.commit()

    print(f"‚úÖ –î–æ–¥–∞–Ω–æ –∑–∞–ø–∏—Å: {medal} ({timestamp})")
    conn.close()


@task
def count_medals(medal):
    """–†–∞—Ö—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–µ–¥–∞–ª–µ–π –∑–∞–¥–∞–Ω–æ–≥–æ —Ç–∏–ø—É."""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    cursor.execute("SELECT COUNT(*) FROM medals WHERE medal_type = ?", (medal,))
    count = cursor.fetchone()[0]

    print(f"üìä –í —Ç–∞–±–ª–∏—Ü—ñ –∑–Ω–∞–π–¥–µ–Ω–æ {count} –º–µ–¥–∞–ª–µ–π —Ç–∏–ø—É {medal}")
    conn.close()


@task
def delay_execution():
    """–ó–∞—Ç—Ä–∏–º–∫–∞ —É 35 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é."""
    print("‚è≥ –ß–µ–∫–∞—î–º–æ 35 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é...")
    time.sleep(35)
    print("‚úÖ –ó–∞—Ç—Ä–∏–º–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


@task
def check_latest_entry():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å —É –±–∞–∑—ñ –Ω–µ —Å—Ç–∞—Ä—à–∏–π –∑–∞ 30 —Å–µ–∫—É–Ω–¥."""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    cursor.execute("SELECT created_at FROM medals ORDER BY created_at DESC LIMIT 1")
    last_entry = cursor.fetchone()

    if last_entry:
        last_time = datetime.strptime(last_entry[0], "%Y-%m-%d %H:%M:%S")
        time_diff = (datetime.now() - last_time).total_seconds()

        if time_diff > 30:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å —É –±–∞–∑—ñ —Å—Ç–∞—Ä—ñ—à–∏–π –∑–∞ 30 —Å–µ–∫—É–Ω–¥ ({time_diff:.2f} —Å–µ–∫)")
            raise Exception("–ó–∞–Ω–∞–¥—Ç–æ —Å—Ç–∞—Ä–∏–π –∑–∞–ø–∏—Å —É –±–∞–∑—ñ")  # –ó—É–ø–∏–Ω—è—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—Ç–æ–∫—É
        else:
            print(f"‚úÖ –û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å —É –±–∞–∑—ñ –≤ –º–µ–∂–∞—Ö 30 —Å–µ–∫—É–Ω–¥ ({time_diff:.2f} —Å–µ–∫)")
    else:
        print("‚ö†Ô∏è –£–≤–∞–≥–∞: –£ –±–∞–∑—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É!")
        raise Exception("–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ —É –±–∞–∑—ñ")  # –ó—É–ø–∏–Ω—è—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—Ç–æ–∫—É

    conn.close()


@flow
def medal_branching_flow():
    """–û—Å–Ω–æ–≤–Ω–∏–π –ø–æ—Ç—ñ–∫, —â–æ –≤–∏–∫–æ–Ω—É—î –ª–æ–≥—ñ–∫—É –≤–∏–±–æ—Ä—É –º–µ–¥–∞–ª—ñ, –∑–∞–ø–∏—Å—É, –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∞—Å—É."""
    medal = pick_medal()
    insert_medal(medal)
    count_medals(medal)
    delay_execution()
    check_latest_entry()  # –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —á–∞—Å—É


if __name__ == "__main__":
    medal_branching_flow()
